package core.grammar;

import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.ArrayList;
import java.util.Arrays;

import org.junit.jupiter.api.Test;

class TestWord {

	String s1 = "bonjour";
	String s2 = "péris";
	String s3 = "journée";
	String s4 = "bl�s�tes";
	String s5 = "abaissâtes";
	String s6 = "déambulions";
	String s7 = "d�sindexer";
	String s8 = "action";
	String s9 = "marcher";
	String s10 = "non";
	String s11 = "v�tures";
	String s12 = "activé";
	String s13 = "coryph�e";
	String s14 = "jutés";
	String s15 = "tolér�t";
	String s16 = "vêtements";
	String s17 = "dénickel�mes";
	String s18 = "exag�r�s";
	String s19 = "parler";
	String s20 = "râtela";

	WordCorrupted w1 = new WordCorrupted(s1);
	WordCorrupted w1bis = new WordCorrupted(s1);
	WordCorrupted w1bis2 = new WordCorrupted(s1);
	WordCorrupted w2 = new WordCorrupted(s2);
	WordCorrupted w2bis = new WordCorrupted(s2);
	WordCorrupted w2bis2 = new WordCorrupted(s2);
	WordCorrupted w3 = new WordCorrupted(s3);
	WordCorrupted w3bis = new WordCorrupted(s3);
	WordCorrupted w3bis2 = new WordCorrupted(s3);
	WordCorrupted w4 = new WordCorrupted(s4);
	WordCorrupted w4bis = new WordCorrupted(s4);
	WordCorrupted w4bis2 = new WordCorrupted(s4);
	WordCorrupted w5 = new WordCorrupted(s5);
	WordCorrupted w5bis = new WordCorrupted(s5);
	WordCorrupted w5bis2 = new WordCorrupted(s5);
	WordCorrupted w6 = new WordCorrupted(s6);
	WordCorrupted w6bis = new WordCorrupted(s6);
	WordCorrupted w6bis2 = new WordCorrupted(s6);
	WordCorrupted w7 = new WordCorrupted(s7);
	WordCorrupted w7bis = new WordCorrupted(s7);
	WordCorrupted w7bis2 = new WordCorrupted(s7);
	WordCorrupted w8 = new WordCorrupted(s8);
	WordCorrupted w8bis = new WordCorrupted(s8);
	WordCorrupted w8bis2 = new WordCorrupted(s8);
	WordCorrupted w9 = new WordCorrupted(s9);
	WordCorrupted w9bis = new WordCorrupted(s9);
	WordCorrupted w9bis2 = new WordCorrupted(s9);
	WordCorrupted w10 = new WordCorrupted(s10);
	WordCorrupted w10bis = new WordCorrupted(s10);
	WordCorrupted w10bis2 = new WordCorrupted(s10);
	WordCorrupted w11 = new WordCorrupted(s11);
	WordCorrupted w11bis = new WordCorrupted(s11);
	WordCorrupted w11bis2 = new WordCorrupted(s11);
	WordCorrupted w12 = new WordCorrupted(s12);
	WordCorrupted w12bis = new WordCorrupted(s12);
	WordCorrupted w12bis2 = new WordCorrupted(s12);
	WordCorrupted w13 = new WordCorrupted(s13);
	WordCorrupted w13bis = new WordCorrupted(s13);
	WordCorrupted w13bis2 = new WordCorrupted(s13);
	WordCorrupted w14 = new WordCorrupted(s14);
	WordCorrupted w14bis = new WordCorrupted(s14);
	WordCorrupted w14bis2 = new WordCorrupted(s14);
	WordCorrupted w15 = new WordCorrupted(s15);
	WordCorrupted w15bis = new WordCorrupted(s15);
	WordCorrupted w15bis2 = new WordCorrupted(s15);
	WordCorrupted w16 = new WordCorrupted(s16);
	WordCorrupted w16bis = new WordCorrupted(s16);
	WordCorrupted w16bis2 = new WordCorrupted(s16);
	WordCorrupted w17 = new WordCorrupted(s17);
	WordCorrupted w17bis = new WordCorrupted(s17);
	WordCorrupted w17bis2 = new WordCorrupted(s17);
	WordCorrupted w18 = new WordCorrupted(s18);
	WordCorrupted w18bis = new WordCorrupted(s18);
	WordCorrupted w18bis2 = new WordCorrupted(s18);
	WordCorrupted w19 = new WordCorrupted(s19);
	WordCorrupted w19bis = new WordCorrupted(s19);
	WordCorrupted w19bis2 = new WordCorrupted(s19);
	WordCorrupted w20 = new WordCorrupted(s20);
	WordCorrupted w20bis = new WordCorrupted(s20);
	WordCorrupted w20bis2 = new WordCorrupted(s20);

	@Test
	void testFindUnknowCharSize() {
		assertEquals(0, w1.findUnknowChar().size());
		assertEquals(0, w2.findUnknowChar().size());
		assertEquals(0, w3.findUnknowChar().size());
		assertEquals(2, w4.findUnknowChar().size());
		assertEquals(0, w5.findUnknowChar().size());
		assertEquals(0, w6.findUnknowChar().size());
		assertEquals(1, w7.findUnknowChar().size());
		assertEquals(0, w8.findUnknowChar().size());
		assertEquals(0, w9.findUnknowChar().size());
		assertEquals(0, w10.findUnknowChar().size());
		assertEquals(1, w11.findUnknowChar().size());
		assertEquals(0, w12.findUnknowChar().size());
		assertEquals(1, w13.findUnknowChar().size());
		assertEquals(0, w14.findUnknowChar().size());
		assertEquals(1, w15.findUnknowChar().size());
		assertEquals(0, w16.findUnknowChar().size());
		assertEquals(1, w17.findUnknowChar().size());
		assertEquals(2, w18.findUnknowChar().size());
		assertEquals(0, w19.findUnknowChar().size());
		assertEquals(0, w20.findUnknowChar().size());
	}

	@Test
	void testFindUnknowCharIndexes() {
		assertEquals(new ArrayList<Integer>(), w1.findUnknowChar());
		assertEquals(new ArrayList<Integer>(), w2.findUnknowChar());
		assertEquals(new ArrayList<Integer>(), w3.findUnknowChar());
		assertEquals(new ArrayList<Integer>(Arrays.asList(2, 4)), w4.findUnknowChar());
		assertEquals(new ArrayList<Integer>(), w5.findUnknowChar());
		assertEquals(new ArrayList<Integer>(), w6.findUnknowChar());
		assertEquals(new ArrayList<Integer>(Arrays.asList(1)), w7.findUnknowChar());
		assertEquals(new ArrayList<Integer>(), w8.findUnknowChar());
		assertEquals(new ArrayList<Integer>(), w9.findUnknowChar());
		assertEquals(new ArrayList<Integer>(), w10.findUnknowChar());
		assertEquals(new ArrayList<Integer>(Arrays.asList(1)), w11.findUnknowChar());
		assertEquals(new ArrayList<Integer>(), w12.findUnknowChar());
		assertEquals(new ArrayList<Integer>(Arrays.asList(6)), w13.findUnknowChar());
		assertEquals(new ArrayList<Integer>(), w14.findUnknowChar());
		assertEquals(new ArrayList<Integer>(Arrays.asList(5)), w15.findUnknowChar());
		assertEquals(new ArrayList<Integer>(), w16.findUnknowChar());
		assertEquals(new ArrayList<Integer>(Arrays.asList(8)), w17.findUnknowChar());
		assertEquals(new ArrayList<Integer>(Arrays.asList(4, 6)), w18.findUnknowChar());
		assertEquals(new ArrayList<Integer>(), w19.findUnknowChar());
		assertEquals(new ArrayList<Integer>(), w20.findUnknowChar());
	}

	@Test
	void testEqualsSymmetric() {
		assertTrue(w1.equals(w1bis));
		assertTrue(w1bis.equals(w1));
		assertTrue(w2.equals(w2bis));
		assertTrue(w2bis.equals(w2));
		assertTrue(w3.equals(w3bis));
		assertTrue(w3bis.equals(w3));
		assertTrue(w4.equals(w4bis));
		assertTrue(w4bis.equals(w4));
		assertTrue(w5.equals(w5bis));
		assertTrue(w5bis.equals(w5));
		assertTrue(w6.equals(w6bis));
		assertTrue(w6bis.equals(w6));
		assertTrue(w7.equals(w7bis));
		assertTrue(w7bis.equals(w7));
		assertTrue(w8.equals(w8bis));
		assertTrue(w8bis.equals(w8));
		assertTrue(w9.equals(w9bis));
		assertTrue(w9bis.equals(w9));
		assertTrue(w10.equals(w10bis));
		assertTrue(w10bis.equals(w10));
		assertTrue(w11.equals(w11bis));
		assertTrue(w11bis.equals(w11));
		assertTrue(w12.equals(w12bis));
		assertTrue(w12bis.equals(w12));
		assertTrue(w13.equals(w13bis));
		assertTrue(w13bis.equals(w13));
		assertTrue(w14.equals(w14bis));
		assertTrue(w14bis.equals(w14));
		assertTrue(w15.equals(w15bis));
		assertTrue(w15bis.equals(w15));
		assertTrue(w16.equals(w16bis));
		assertTrue(w16bis.equals(w16));
		assertTrue(w17.equals(w17bis));
		assertTrue(w17bis.equals(w17));
		assertTrue(w18.equals(w18bis));
		assertTrue(w18bis.equals(w18));
		assertTrue(w19.equals(w19bis));
		assertTrue(w19bis.equals(w19));
		assertTrue(w20.equals(w20bis));
		assertTrue(w20bis.equals(w20));
	}

	@Test
	void testEqualsTransitive() {
		assertTrue(w1.equals(w1bis));
		assertTrue(w1bis.equals(w1bis2));
		assertTrue(w1.equals(w1bis2));
		assertTrue(w2.equals(w2bis));
		assertTrue(w2bis.equals(w2bis2));
		assertTrue(w2.equals(w2bis2));
		assertTrue(w3.equals(w3bis));
		assertTrue(w3bis.equals(w3bis2));
		assertTrue(w3.equals(w3bis2));
		assertTrue(w4.equals(w4bis));
		assertTrue(w4bis.equals(w4bis2));
		assertTrue(w4.equals(w4bis2));
		assertTrue(w5.equals(w5bis));
		assertTrue(w5bis.equals(w5bis2));
		assertTrue(w5.equals(w5bis2));
		assertTrue(w6.equals(w6bis));
		assertTrue(w6bis.equals(w6bis2));
		assertTrue(w6.equals(w6bis2));
		assertTrue(w7.equals(w7bis));
		assertTrue(w7bis.equals(w7bis2));
		assertTrue(w7.equals(w7bis2));
		assertTrue(w8.equals(w8bis));
		assertTrue(w8bis.equals(w8bis2));
		assertTrue(w8.equals(w8bis2));
		assertTrue(w9.equals(w9bis));
		assertTrue(w9bis.equals(w9bis2));
		assertTrue(w9.equals(w9bis2));
		assertTrue(w10.equals(w10bis));
		assertTrue(w10bis.equals(w10bis2));
		assertTrue(w10.equals(w10bis2));
		assertTrue(w11.equals(w11bis));
		assertTrue(w11bis.equals(w11bis2));
		assertTrue(w11.equals(w11bis2));
		assertTrue(w12.equals(w12bis));
		assertTrue(w12bis.equals(w12bis2));
		assertTrue(w12.equals(w12bis2));
		assertTrue(w13.equals(w13bis));
		assertTrue(w13bis.equals(w13bis2));
		assertTrue(w13.equals(w13bis2));
		assertTrue(w14.equals(w14bis));
		assertTrue(w14bis.equals(w14bis2));
		assertTrue(w14.equals(w14bis2));
		assertTrue(w15.equals(w15bis));
		assertTrue(w15bis.equals(w15bis2));
		assertTrue(w15.equals(w15bis2));
		assertTrue(w16.equals(w16bis));
		assertTrue(w16bis.equals(w16bis2));
		assertTrue(w16.equals(w16bis2));
		assertTrue(w17.equals(w17bis));
		assertTrue(w17bis.equals(w17bis2));
		assertTrue(w17.equals(w17bis2));
		assertTrue(w18.equals(w18bis));
		assertTrue(w18bis.equals(w18bis2));
		assertTrue(w18.equals(w18bis2));
		assertTrue(w19.equals(w19bis));
		assertTrue(w19bis.equals(w19bis2));
		assertTrue(w19.equals(w19bis2));
		assertTrue(w20.equals(w20bis));
		assertTrue(w20bis.equals(w20bis2));
		assertTrue(w20.equals(w20bis2));
	}
}
